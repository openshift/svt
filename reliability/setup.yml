---
- name: Read config and create groups
  hosts: localhost
  tasks:
    - name: Include config file
      include_vars:
        file: ./config/config.yaml
        name: env
    - name: Add masters, nodes, etcds to groups
      add_host:
        name: "{{ item }}"
        groups: masters
      with_items: "{{ env.environment.masters }}"
    - name: Add nodes to groups
      add_host:
        name: "{{ item }}"
        groups: nodes
      with_items: "{{ env.environment.nodes }}"
    - name: Add etcds to groups
      add_host:
        name: "{{ item }}"
        groups: etcds
      with_items: "{{ env.environment.etcds }}"
    - name: Set global variables
      set_fact:
        auth_type: "{{ env.environment.authtype }}"

- name: Configure reliability client/cleanup
  hosts: localhost
  tasks:
    - name: Delete logs directory
      file:
        state: absent
        path: logs
    - name: Delete runtime directory
      file:
        state: absent
        path: runtime
    - name: Delete users.data
      file:
        state: absent
        path: config/users.data
    - name: Delete create users.data
      file:
        state: touch
        path: config/users.data
    - name: Create logs directory
      file:
        state: directory
        path: logs
    - name: Create runtime/keys directory
      file:
        state: directory
        path: runtime/keys
    - name: Create runtime/repos directory
      file:
        state: directory
        path: runtime/repos
    - name: Create runtime/templates directory
      file:
        state: directory
        path: runtime/templates
    - name: Install Ruby on client
      yum:
        name: ruby
        state: present
    - name: gem install filewatcher
      gem:
        name: filewatcher
        version: 0.5.4
        state: present
    - name: gem install net-ssh
      gem:
        name: net-ssh
        state: present
        version: 2.9.2
    - name: gem install net-scp
      gem:
        name: net-scp
        state: present

- name: Copy configs from master
  hosts: masters
  tasks:
    - fetch:
        src: /etc/origin/master/admin.kubeconfig
        dest: runtime/keys/
        flat: yes
    - fetch:
        src: /etc/origin/master/ca.crt
        dest: runtime/keys/
        flat: yes
    - name: Find if its container or rpm install install
      stat: path=/usr/share/openshift/examples/quickstart-templates/
      register: rpm_install
    - name: Find if its container or rpm install install
      stat: path=/etc/origin/examples/quickstart-templates/
      register: example_templates
    - synchronize:
        src: /usr/share/openshift/examples/quickstart-templates/
        dest: runtime/templates/
        mode: pull
      when: rpm_install.stat.exists
    - synchronize:
        src: /etc/origin/examples/quickstart-templates/
        dest: runtime/templates/
        mode: pull
      when: not rpm_install.stat.exists and example_templates.stat.exists

- name: Configure amazon monitoring
  hosts: masters, nodes, etcds
  vars:
    iaas_name: "{{ lookup('env', 'iaas_name') | default('AWS', True) }}"
  tasks:
    - name: Include config file
      include_vars:
        file: ./config/config.yaml
        name: env
    - include: monitoring-setup.yml
      when: env.environment.monitoring is defined

- name: Setup master
  hosts: masters
  tasks:
    - name: Include config file
      include_vars:
        file: ./config/config.yaml
        name: env
    - name: Create cron for cleanup on master
      cron:
        name: "clean images, builds, deployments"
        minute: "0"
        hour: "*/3"
        job: "/root/svt/reliability/cleanup.sh"
    - name: Setup pruning user
      command: "htpasswd -c -b {{ env.environment.htpasswd }} redhat redhat"
      ignore_errors: yes
      when: env.environment.authtype == "htpasswd"
    - name: Login with pruning user
      command: oc login -u redhat -p redhat
    - name: login back with system admin
      command: oc login -u system:admin
    - name: Provide pruning user permissions
      command: oc adm policy add-cluster-role-to-user system:image-pruner redhat
      environment:
        KUBECONFIG: "{{ env.environment.kubeconfig }}"


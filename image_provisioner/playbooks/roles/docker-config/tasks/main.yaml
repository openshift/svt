---
- name: set selinux to enforcing
  selinux:
    policy: targeted
    state: enforcing

- name: copy docker-storage-setup config when storage driver is devicemapper
  template:
    src: etc/sysconfig/docker-storage-setup.j2
    dest: /etc/sysconfig/docker-storage-setup
  when: docker_storage_driver == "devicemapper"

- name: copy docker-storage-setup config when storage mapper is overlay
  template:
    src: etc/sysconfig/docker-storage-overlay-setup.j2
    dest: /etc/sysconfig/docker-storage-setup
  when: docker_storage_driver == "overlay"

- name: create docker config directory
  file:
    path: /root/.docker
    state: directory

- name: download docker login config.json
  copy:
    src: /root/{{ config_repo }}/image_provisioner/config.json
    dest: /root/.docker/
    remote_src: true

- name: install docker
  yum:
    name: docker
    state: latest

- block:
   - name: format the partition
     command: mkfs.xfs -f {{ docker_storage_device }}

   - name: update fstab
     shell: echo "{{ docker_storage_device }} /var/lib/docker/overlay                    xfs   defaults        0 0" >> /etc/fstab
  when: docker_storage_driver == "overlay"

- block:
   - name: restart machine
     shell: sleep 2 && shutdown -r now "Ansible updates triggered"
     async: 1
     poll: 0
     ignore_errors: true
 
   - name: waiting for server to come back
     local_action: wait_for
     args:
       host: "{{ inventory_hostname }}"
       port: 22
       state: started
       delay: 15
       timeout: 600

   - name: Update kernel version
     setup: filter='ansible_kernel'
  
   - name: check if current kernel version is 3.10.0-517 or later
     shell: rpmdev-vercmp {{ ansible_kernel }} 3.10.0-517 > /dev/null
     register: vercmp_out
     ignore_errors: true
  
   - name: exit if kernel version is outdated
     fail: 
       msg: "please update the kernel to 3.10.0-517 or later"
     when: vercmp_out.rc == 12
  when: docker_storage_driver == "overlay" or update_kernel == "true"

- block:
   - name: check for existing PV
     command: pvdisplay
     register: pv_result

   - name: create LVM pv
     command: pvcreate {{ docker_storage_device }}
     when: pv_result.rc != 0

   - name: create VG for docker thin pool
     lvg: vg=docker_vg pvs={{ docker_storage_device }}
  when: docker_storage_driver == "devicemapper"

- name: run docker-storage-setup
  shell: docker-storage-setup

- name: enable docker service and start it
  service:
    name: docker
    state: restarted
    enabled: yes

- hosts: localhost
  connection: local
  become: no
  tasks:

  - name: set instance_tag to default value in case it is defined but not set to any value
    set_fact:
      instance_tag: ami_builder
    when: instance_tag == ""

  - name: launch temporary instance
    connection: local
    become: no
    ec2:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      assign_public_ip: yes
      region: "{{ region }}"
      key_name: "{{ key_name }}"
      group_id: "{{ group_id }}"
      instance_type: "{{ instance_type }}"
      vpc_subnet_id: "{{ vpc_subnet_id }}"
      image: "{{ base_image }}"
      volumes:
        - device_name: "{{ '/dev/sda1' if atomic | default(False) else '/dev/sdb' }}"
          volume_type: gp2
          volume_size: "{{ volume_size | default(70) }}"
          delete_on_termination: true
      wait: yes
      user_data: "{{ lookup('file', '../cloud-init/user-data-aws') }}"
      exact_count: 1
      count_tag:
         Name: "{{ instance_tag | default('ami_builder') }}"
      instance_tags:
         Name: "{{ instance_tag | default('ami_builder') }}"
    register: ami_instance

  - name: waiting for ssh to start
    wait_for: port=22 host={{ ami_instance.tagged_instances.0.public_ip }} timeout=300
              search_regex=OpenSSH

  - name: add host to group
    add_host: name={{ ami_instance.tagged_instances.0.public_dns_name }} groups=just_created

- hosts: localhost
  user: root
  vars:
    internal_image: false
  roles:
    - { role: repo-install, when: atomic | default(False) | bool }
    - { role: clone-repos, when: atomic | default(False) | bool }

- hosts: just_created
  remote_user: root
  vars:
    internal_image: false
  roles:
    - { role: repo-install, when: not atomic | default(False) | bool }
    - { role: os-kickstart }
    - { role: clone-repos, when: not atomic | default(False) | bool }
    - { role: docker-config }
    - { role: multipath-blacklist, when: multipath_blacklist | default(False) | bool }
    - { role: pbench-config, when: not atomic | default(False) | bool }
    - { role: aos-ansible }
    - { role: cri-o, when: crio | default(False) | bool }
    - { role: ansible-update, when: not atomic | default(False) | bool }
    - { role: openshift-package-install, when: not atomic | default(False) | bool }
    - { role: pbench-kickstart }
    - { role: collectd-install }
    - { role: journald-config }
    - { role: seal-image, when: not atomic | default(False) | bool }
    - { role: clean-env, when: atomic | default(False) | bool }

- hosts: localhost
  connection: local
  become: no
  tasks:

  - name: set ami_type
    set_fact:
      ami_type: "{{ 'atomic' if atomic | default(False) else 'rhel' }}"

  - name: set ami_name when extra_tags is defined
    set_fact:
      ami_name: ocp-{{ openshift_version }}-{{ ami_type }}-{{ extra_tags }}-gold
    when: extra_tags is defined

  - name: set ami_name when extra_tags is not defined or is empty
    set_fact:
      ami_name:  ocp-{{ openshift_version }}-{{ ami_type }}-gold
    when: extra_tags is not defined or extra_tags == ""

  - name: bundle ami
    action: 
      module: ec2_ami
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      instance_id: "{{ ami_instance.tagged_instances.0.id }}"
      region: "{{ region }}"
      state: present
      description: This was provisioned {{ ansible_date_time.iso8601 }}
      name: "{{ ami_name }}"
      wait: yes
    register: amioutput

  - name: terminate temporary instance
    action:
      module: ec2
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      state: absent
      region: "{{ region }}"
      instance_ids: "{{ ami_instance.tagged_instances.0.id }}"


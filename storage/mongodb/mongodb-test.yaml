---
- hosts: all
  vars_files:
    - external_vars.yaml
  tasks:
  - name: print hostname
    debug:
      msg: "hostname: {{ inventory_hostname }} and test_project_name: {{ test_project_name }}"
    tags:
      - setup

  - name: clean tmp folder
    file:
      state: absent
      path: "{{ tmp_folder }}/"
    tags:
      - setup

  - name: copy files to remote
    copy:
      src: files
      dest: "{{ tmp_folder }}"
    tags:
      - setup

  - block:
    - name: list all scripts
      find:
        paths: "{{ tmp_folder }}/files/scripts"
        patterns: "*.sh"
      register: tmp_script_glob

    - name: make scripts executable
      file:
        path: "{{ item.path }}"
        mode: 0744
      with_items:
        - "{{ tmp_script_glob.files }}"
    tags:
      - setup

  - block:
      - name: delete project
        shell: oc delete project {{ test_project_name }}
        ignore_errors: True
      - name: wait until the project is gone
        shell: oc get project {{ test_project_name }}
        register: get_project_result
        until: get_project_result.stderr.find(" not found") != -1
        retries: 11
        delay: 10
        ignore_errors: True
      - name: fail the test if the project is still there after 120s
        fail:
          msg: "the pod is NOT deleted after 120s"
        when: get_project_result.rc == 0
    when: delete_test_project_before_test|bool == true
    tags:
      - setup

  - name: create test project
    command:  oc new-project {{ test_project_name }} --skip-config-write=true
    tags:
      - setup

  - name: create mongodb
    shell: oc process -f {{ tmp_folder }}/files/oc/mongodb-persistent-template.yaml -p MEMORY_LIMIT={{ MEMORY_LIMIT }} -p MONGODB_USER={{ MONGODB_USER }} -p MONGODB_PASSWORD={{ MONGODB_PASSWORD }} -p MONGODB_DATABASE={{ MONGODB_DATABASE }} -p VOLUME_CAPACITY={{ VOLUME_CAPACITY }} -p MONGODB_VERSION={{ MONGODB_VERSION }} -p STORAGE_CLASS_NAME={{ STORAGE_CLASS_NAME }} | oc create --namespace={{ test_project_name }} -f -
    tags:
      - setup

  - block:
      - name: wait until the mongodb pod is running
        shell: oc get pod -n "{{ test_project_name }}" | grep -v deploy | grep mongodb | grep Running
        register: pod_ready_result
        until: pod_ready_result.rc == 0
        retries: 11
        delay: 10
        ignore_errors: True
      - name: fail the test if the pod is NOT running after 120s
        fail:
          msg: "the pod is NOT running after 120s"
        when: pod_ready_result|failed
    tags:
      - setup

  - name: create ycsb
    shell: oc create  --namespace={{ test_project_name }} -f {{ tmp_folder }}/files/oc/dc_ycsb.yaml
    tags:
      - setup

  - block:
      - name: wait until the ycsb pod is running
        shell: oc get pod -n "{{ test_project_name }}" | grep -v deploy | grep ycsb | grep Running
        register: pod_ready_result
        until: pod_ready_result.rc == 0
        retries: 11
        delay: 10
        ignore_errors: True
      - name: fail the test if the pod is NOT running after 120s
        fail:
          msg: "the pod is NOT running after 120s"
        when: pod_ready_result|failed
    tags:
      - setup

  - name: register pbench
    shell: |
      pbench-kill-tools
      pbench-clear-tools
      pbench-clear-results
      pbench-register-tool-set
      pbench-register-tool --name=oc

      NODES=($(oc get node  --no-headers | grep -v master | awk '{print $1}'))

      for node in "${NODES[@]}"
      do
        pbench-register-tool-set --remote="${node}"
      done
    when: pbench_registration|bool == true
    tags:
      - run

  - name: run the benchmarks
    command: pbench-user-benchmark --config="mongodb_storage_test_{{ STORAGE_CLASS_NAME }}_{{ workload }}_{{ MEMORY_LIMIT }}" -- "{{ tmp_folder }}/files/scripts/test-mongo.sh" "{{ test_project_name }}" "{{ iteration }}" "{{ ycsb_threads }}" "{{ workload }}"
    tags:
      - run

  - name: pbench copy results
    command: pbench-copy-results
    when: pbench_copy_result|bool == true
    tags:
      - run